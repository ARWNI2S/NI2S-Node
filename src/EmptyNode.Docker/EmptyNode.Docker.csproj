<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>$(DefaultTargetFrameworks)</TargetFrameworks>
    <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
    <DockerfileContext>..\..</DockerfileContext>
  </PropertyGroup>

  <ItemGroup>
    <!-- We copy the entire \Node_Data directory. But we ignore JSON files and data protection keys  -->
    <Content Include="Node_Data\**" CopyToPublishDirectory="PreserveNewest" Exclude="Node_Data\*.json" />
    <Content Remove="Node_Data\*.json" />
    <Content Update="Node_Data\DataProtectionKeys\*.xml" CopyToPublishDirectory="Never" />

    <Compile Remove="plugins\**;engine\**" />
    <Content Remove="plugins\**;engine\**" />
    <EmbeddedResource Remove="plugins\**;engine\**" />
    <None Remove="plugins\**;engine\**" />
    <None Include="plugins\**" CopyToPublishDirectory="PreserveNewest" Exclude="plugins\**\runtimes\**;plugins\**\ref\**;plugins\**\*.pdb" />

    <Content Include="engine\**" CopyToPublishDirectory="PreserveNewest" CopyToOutputDirectory="Never" />

    <!-- We copy the \Logs directory -->
    <Content Include="Logs\**" CopyToPublishDirectory="PreserveNewest" />
    <None Remove="plugins\Uploaded\placeholder.txt" />
    <Content Include="plugins\Uploaded\placeholder.txt">
      <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
      <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
    </Content>

  </ItemGroup>

  <ItemGroup>
    <!-- This setting fixes the problem caused by this update in the websdk in vs2019
    https://github.com/aspnet/websdk/commit/7e6b193ddcf1eec5c0a88a9748c626775555273e#diff-edf5a48ed0d4aa5a4289cb857bf46a04
    Therefore, we restore the standard configuration behavior (there was no copy to the output directory) 
    in order to avoid the "Duplicate dll" error during publication. 
    We can also use “ExcludeConfigFilesFromBuildOutput” according to https://github.com/aspnet/AspNetCore/issues/14017 -->
    <Content Update="**\*.config;**\*.json" CopyToOutputDirectory="Never" CopyToPublishDirectory="PreserveNewest" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\ARWNI2S.Node\ARWNI2S.Node.csproj" />
  </ItemGroup>

  <PropertyGroup>
    <!--The common language runtime (CLR) supports two types of garbage collection:
      workstation garbage collection, which is available on all systems, and server garbage collection,
      which is available on multiprocessor systems.
      
      For single-processor computers, the default workstation garbage collection should be the fastest option.
      Either workstation or server can be used for two-processor computers.
      Server garbage collection should be the fastest option for more than two processors.
      
      More details about GC you can see here: https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals-->
    <ServerGarbageCollection>false</ServerGarbageCollection>
    <!--In workstation or server garbage collection, you can enable concurrent garbage collection,
      which enables threads to run concurrently with a dedicated thread that performs the garbage
      collection for most of the duration of the collection.
      
      Concurrent garbage collection enables interactive applications to be more responsive by
      minimizing pauses for a collection. Managed threads can continue to run most of the time while
      the concurrent garbage collection thread is running. This results in shorter pauses while
      a garbage collection is occurring.
      
      To improve performance when several processes are running, disable concurrent garbage collection.
      
      More details here: https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals#concurrent-garbage-collection-->
    <ConcurrentGarbageCollection>false</ConcurrentGarbageCollection>
  </PropertyGroup>

  <PropertyGroup>
    <GameName Condition=" '$(GameName)'=='' ">Game</GameName>
    <RunWorkingDirectory Condition=" '$(RunWorkingDirectory)' == '' and '$(EnableDefaultRunWorkingDirectory)' != 'false' ">$(MSBuildProjectDirectory)</RunWorkingDirectory>
    <IsFrameworkPart>false</IsFrameworkPart>
    <OutputType>Exe</OutputType>
    <RootNamespace>ARWNI2S.$(GameName)</RootNamespace>
    <StartupObject>$(RootNamespace).Program</StartupObject>
    <AssemblyName>$(GameName).Node</AssemblyName>
  </PropertyGroup>
  <ItemGroup>
    <ProjectCapability Include="SupportHierarchyContextSvc" />
    <ProjectCapability Include="DynamicDependentFile" />
    <ProjectCapability Include="DynamicFileNesting" />
    <ProjectCapability Include="LocalUserSecrets" />
    <ProjectCapability Include="DynamicFileNestingEnabled" />

    <ProjectCapability Include="CustomContentFolder" />
  </ItemGroup>

</Project>
