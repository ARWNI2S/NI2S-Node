<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Collections_ArgMustNotBeNegative" xml:space="preserve">
    <value>The argument may not be less than zero.</value>
  </data>
  <data name="Collections_ArrayTooSmall" xml:space="preserve">
    <value>The array is too small to hold all of the items.</value>
  </data>
  <data name="Collections_BadComparandType" xml:space="preserve">
    <value>Comparand is not of the correct type.</value>
  </data>
  <data name="Collections_CannotModifyCollection" xml:space="preserve">
    <value>The \"{0}\" collection is read-only and cannot be modified.</value>
  </data>
  <data name="Collections_CapacityLessThanCount" xml:space="preserve">
    <value>The capacity may not be less than Count.</value>
    <comment>TODO: replace Count for name, format.</comment>
  </data>
  <data name="Collections_ChangeDuringEnumeration" xml:space="preserve">
    <value>Collection was modified during an enumeration.</value>
  </data>
  <data name="Collections_CollectionIsEmpty" xml:space="preserve">
    <value>The collection is empty.</value>
  </data>
  <data name="Collections_CollectionIsReadOnly" xml:space="preserve">
    <value>The collection may not be read only.</value>
  </data>
  <data name="Collections_CollectionTooLarge" xml:space="preserve">
    <value>The collection has become too large.</value>
  </data>
  <data name="Collections_IdentityComparerNoCompare" xml:space="preserve">
    <value>The Compare method is not supported on an identity comparer.</value>
  </data>
  <data name="Collections_InconsistentComparisons" xml:space="preserve">
    <value>The two collections cannot be combined because they use different comparison operations.</value>
  </data>
  <data name="Collections_InvalidLoadFactor" xml:space="preserve">
    <value>The load factor must be between 0.25 and 0.95.</value>
  </data>
  <data name="Collections_KeyAlreadyPresent" xml:space="preserve">
    <value>The key was already present in the dictionary.</value>
  </data>
  <data name="Collections_KeyNotFound" xml:space="preserve">
    <value>The key was not found in the collection.</value>
  </data>
  <data name="Collections_ListIsReadOnly" xml:space="preserve">
    <value>The list may not be read only.</value>
  </data>
  <data name="Collections_MustOverrideIndexerGet" xml:space="preserve">
    <value>The get accessor of the indexer must be overridden.</value>
  </data>
  <data name="Collections_MustOverrideIndexerSet" xml:space="preserve">
    <value>The set accessor of the indexer must be overridden.</value>
  </data>
  <data name="Collections_MustOverrideOrReimplement" xml:space="preserve">
    <value>This method must be overridden or re-implemented in the derived class.</value>
  </data>
  <data name="Collections_OutOfViewRange" xml:space="preserve">
    <value>The argument is outside the range of this View.</value>
  </data>
  <data name="Collections_ResetNotSupported" xml:space="preserve">
    <value>Reset is not supported on this enumerator.</value>
  </data>
  <data name="Collections_TypeNotCloneable" xml:space="preserve">
    <value>Type \"{0}\" does not implement ICloneable.</value>
  </data>
  <data name="Collections_UncomparableType" xml:space="preserve">
    <value>Type "{0}" does not implement IComparable&lt;{0}&gt; or IComparable.</value>
  </data>
  <data name="Collections_WrongType" xml:space="preserve">
    <value>The value \"{0}\" isn't of type \"{1}\" and can't be used in this generic collection.</value>
  </data>
  <data name="CommonStrings_No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="CommonStrings_PressAKeyToContinue" xml:space="preserve">
    <value>Please press a key to continue...</value>
  </data>
  <data name="CommonStrings_Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="Debugging_DefaultAssert" xml:space="preserve">
    <value>Asserted condition was false.</value>
  </data>
  <data name="Debugging_DefaultAssertFormat" xml:space="preserve">
    <value>Asserted condition by {0} at {1} was false.</value>
  </data>
  <data name="DomainManager_CreateDomain_Format" xml:space="preserve">
    <value>Creating domain {0}</value>
  </data>
  <data name="DomainManager_DomainCreated_Format" xml:space="preserve">
    <value>Domain {0} created. {1}</value>
  </data>
  <data name="DomainManager_ExitCode_Format" xml:space="preserve">
    <value>ExitCode = {0}</value>
    <comment>{0} - exitCode</comment>
  </data>
  <data name="DomainManager_Initialize_Format" xml:space="preserve">
    <value>Initializing domain for application {0}</value>
  </data>
  <data name="DomainManager_IsFullTrust_Format" xml:space="preserve">
    <value>IsFullyTrusted = {0}</value>
  </data>
  <data name="DomainManager_RunMessage_Format" xml:space="preserve">
    <value>Executing {0}</value>
    <comment>{0} - Path.GetFileName(assemblyFilename)</comment>
  </data>
  <data name="Logger_LogMessageTruncated_Format" xml:space="preserve">
    <value>"{0}. MESSAGE TRUNCATED AT THIS POINT!! Max message size = {1}"</value>
  </data>
  <data name="Logging_ConsoleText_WriteError" xml:space="preserve">
    <value>Exception = </value>
    <comment>Exception'space'='space'</comment>
  </data>
  <data name="TimerAfterCallbackAsync" xml:space="preserve">
    <value>Completed async task timer callback for timer {0}</value>
  </data>
  <data name="TimerAfterCallbackSync" xml:space="preserve">
    <value>Completed sync timer callback for timer {0}</value>
  </data>
  <data name="TimerBeforeCallbackAsync" xml:space="preserve">
    <value>About to make async task timer callback for timer {0}</value>
  </data>
  <data name="TimerBeforeCallbackSync" xml:space="preserve">
    <value>About to make sync timer callback for timer {0}</value>
  </data>
  <data name="TimerChanging" xml:space="preserve">
    <value>Changing timer {0} to dueTime={1} period={2}</value>
  </data>
  <data name="TimerChanging_Creating" xml:space="preserve">
    <value>Creating timer {0} with dueTime={1} period={2}</value>
  </data>
  <data name="TimerChanging_Queue" xml:space="preserve">
    <value>About to QueueNextTimerTick for timer {0}</value>
  </data>
  <data name="TimerDisposing" xml:space="preserve">
    <value />
  </data>
  <data name="TimerNextTick" xml:space="preserve">
    <value>Queued next tick for timer {0} in {1}</value>
  </data>
  <data name="TimerStopped" xml:space="preserve">
    <value>Timer {0} is now stopped and disposed</value>
  </data>
  <data name="TraceLogger_Assert_FailMessage" xml:space="preserve">
    <value>Assert failed with message = </value>
  </data>
  <data name="TraceLogger_Assert_Message" xml:space="preserve">
    <value>Internal contract assertion has failed!</value>
  </data>
  <data name="TraceLogger_CheckBulkMessageLimits_Format" xml:space="preserve">
    <value>Log code {0} occurred {1} additional time{2} in the previous {3}</value>
  </data>
  <data name="TraceLogger_ConfigDataMissing" xml:space="preserve">
    <value>No logger config data provided.</value>
  </data>
  <data name="TraceLogger_Fail_ErrorMessage" xml:space="preserve">
    <value>INTERNAL FAILURE! About to crash! Fail message is: </value>
  </data>
  <data name="TraceLogger_Fail_Message" xml:space="preserve">
    <value>Internal Fail!</value>
  </data>
  <data name="TraceLogger_Fail_UnrecoverableMessage" xml:space="preserve">
    <value>Unrecoverable failure: </value>
  </data>
  <data name="TraceLogger_Initialize_ArgumentNullException" xml:space="preserve">
    <value>No logger config data provided.</value>
  </data>
  <data name="TraceLogger_LogWithoutBulkingAndTruncating_Format" xml:space="preserve">
    <value>CHUNKED MESSAGE Part {0}: {1}</value>
    <comment>{0} - partNum, {1} - message.Substring(startIndex, chunkSize)</comment>
  </data>
  <data name="TraceLogger_PrintException_Helper_NoExceptionsMesage" xml:space="preserve">
    <value>No LoaderExceptions found</value>
  </data>
  <data name="TraceLogger_PrintOneException_Format" xml:space="preserve">
    <value>Exc level {0}: {1}: {2}{3}</value>
  </data>
  <data name="TraceLogger_WriteLogMessage_ExceptionFormat" xml:space="preserve">
    <value>"Exception while passing a log message to log consumer. TraceLogger type:{0}, name:{1}, severity:{2}, message:{3}, error code:{4}, message exception:{5}, log consumer exception:{6}"</value>
    <comment>{0} - consumer.GetType().FullName, {1} - logName, {2} - sev, {3} - message, {4} - errorCode, {5} - exception, {6} - exc</comment>
  </data>
  <data name="TraceLogger_WriteLogMessage_MessageTruncatedText" xml:space="preserve">
    <value>Previous log message was truncated - Max size = </value>
    <comment>Max size'space'='space'</comment>
  </data>
</root>